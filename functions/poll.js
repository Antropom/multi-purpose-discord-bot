exports.poll = (message, commandBody, database, Discord) => {
  // CrÃ©Ã© un tableau en sÃ©parant les arguments entre parenthÃ¨ses
  const quotedArgs = commandBody.match(/\w+|"[^"]+"/g)

  const emojis = ['ğŸ‡¦', 'ğŸ‡§', 'ğŸ‡¨', 'ğŸ‡©', 'ğŸ‡ª', 'ğŸ‡«']

  // VÃ©rification de du nombre d'arguments
  if (quotedArgs.length <= 3) {
    message.channel.send(
      'Veuillez poser une question et proposer au moins deux rÃ©ponses'
    )
    return
  } else if (quotedArgs.length > 8) {
    message.channel.send('Veuillez saisir au maximum six rÃ©ponses')
    return
  }

  // On enlÃ¨ve la commande
  quotedArgs.shift()

  const questionTitle = quotedArgs.shift().replace(/['"]+/g, '')

  // CrÃ©ation de chaque rÃ©ponse possible en y ajoutant des Ã©mojis
  const answersWithEmojis = quotedArgs.map(
    (answer, i) => `${emojis[i]} ${answer.replace(/['"]+/g, '')}`
  )

  database.create(message, questionTitle, answersWithEmojis).then((pollId) => {
    if (pollId === -1) {
      message.channel.send(
        'Un problÃ¨me est survenu lors de la crÃ©ation du sondage.'
      )
      return
    }
    // CrÃ©ation de la string avec retours Ã  la ligne pour l'embes
    const stringAnswers = answersWithEmojis.join('\n')

    const pollEmbed = new Discord.MessageEmbed()
      .setColor('#0099ff')
      .setTitle(`Sondage #${pollId} de ${message.author.username}`)
      .addFields({
        name: questionTitle,
        value: `${stringAnswers}`,
      })
      .setTimestamp()

    message.channel
      .send(pollEmbed)
      .then((embedMessage) => {
        answersWithEmojis.forEach((reaction, i) =>
          embedMessage.react(emojis[i])
        )
        database.setMessageId(pollId, embedMessage.id)
      })
      .then(() => {
        message.delete()
      })
  })
}
